# -*- coding: utf-8 -*-
"""bad_bunny_musical_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VSdK6UEWjeb02-MOnxg0ZIklZH5s2hNe
"""

#-----------------------------------
# Version: 1.0.0
# date(m/d/a):12/22/2023
# project: analyzing bad bunny musical data
#------------------------------------

# Goal:
# analyzing bad bunny songs
# identifying top songs in chile
# using the
# table exploration:
# rows: 173
# fields 14
# fields contained are:
# name, popularity, album, release, danceability, energy, key, loudness, speechiness , acousticness .
# tempo, intrumentalness, valence and duration

import pandas as pd
import plotly.express as px

df_bad_bunny = pd.read_csv("bad_bunny.csv")
df_bad_bunny

# converting field "release" to date format type
# once the data type is converted it is updated in the field Release to ensure the type is updated

df_bad_bunny["Release"] = pd.to_datetime(df_bad_bunny["Release"])

# creating custom function get era(date):
# argument is date field to clasify based on the release
# clasifying songs that are from a speficic album era or colaboration era of the songs bad bunny has taken out

def get_era(date):
  if date == pd.to_datetime("2019-06-28"):
    return("Oasis")
  if date == pd.to_datetime("2020-05-10"):
    return("Las Que No Iban A Salir")
  if date < pd.to_datetime("2018-12-23"):
    return(" Dj Luian-bad bunny")
  elif date < pd.to_datetime("2020-02-29"):
    return("X 100PRE")
  elif date < pd.to_datetime("2020-11-27"):
    return("YHLQMDLG")
  elif date < pd.to_datetime("2022-05-06"):
    return("El Ultimo Tour del Mundo")
  elif date < pd.to_datetime("2023-10-13"):
    return("Un Verano Sin Ti")
  else:
    return "nadie sabe lo que va a pasar mañana"
# creating custum function is_lb(album):
# takes as argument the field album and outputs classification based on the contained album name
# based on the information it classifies in album or single
def is_lp(album):
  if album in [
      "X 100PRE","OASIS","YHLQMDLG",
      "LAS QUE NO IBAN A SALIR", "El ÚLTIMO TOUR DEL MUNDO",
      "Un Verano Sin Ti", "nadie sabe lo que va a pasar mañana"
  ]:
    return "Album"
  else:
    return "Single"

# Creating calculated field Era:
# running the get_ era function while running all values from the dataframe Release field

df_bad_bunny["Era"] = df_bad_bunny["Release"].map(get_era)

# creating calculated field LP:
# running the is_lp function using Album dataframe values as the argument
df_bad_bunny["LP"] = df_bad_bunny["Album"].map(is_lp)

df_bad_bunny

# creating table df_bad_bunny_album:
# removing null values using .dropna()
# filering values using .query for LP == Album
df_bad_bunny_album = df_bad_bunny.query("LP == 'Album'").dropna()

# displaying df_bad_bunny_album data
df_bad_bunny_album

# scatter plot analysis : Exploring the Connection Between Valence and Tempo in Bad Bunny Music
# Comparing the Valance and tempo in the bad bunny music to demostrate and
# to ilustrate the relationship between emotional positivity(Valence) of a song and it's tempo

px.scatter(
    df_bad_bunny_album,
    x = "Tempo", y = "Valence",
    color = "Album",
    hover_data= "Name",
    title= "Exploring the Connection Between Valence and Tempo in Bad Bunny Music"
)

# Box plot graph: Analyzing Tempo Variation in Bad Bunny Music
# Determining the central tendency tempo for bad bunny musics

px.box(df_bad_bunny_album,x="Tempo", color ="Album", title= "Analyzing Tempo Variation in Bad Bunny's Music")

# bar chart: Popularity Analysis of Bad Bunny's Music
fig = px.bar(df_bad_bunny_album, x="Album", y="Popularity", color="Album", title="Popularity Analysis of Bad Bunny's Music")
fig.update_layout(xaxis={'categoryorder':'total descending'})
fig.show()

